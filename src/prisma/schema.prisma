generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  accountID   String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  password    String
  status      String?       @default("active") @db.VarChar(50)
  role        Role
  createdAt   DateTime?     @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?     @default(now()) @db.Timestamptz(6)
  Admin       Admin?
  Application Application[]
  Company     Company?
  Coordinator Coordinator?
  Customer    Customer?
  Driver      Driver?
  Staff       Staff?
}

model Company {
  companyID    String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  accountID    String?   @unique @db.Uuid
  companyName  String?   @db.VarChar(255)
  taxCode      String?   @db.VarChar(100)
  contactEmail String?   @db.VarChar(255)
  createdAt    DateTime? @default(now()) @db.Timestamptz(6)
  Account      Account?  @relation(fields: [accountID], references: [accountID], onUpdate: NoAction)
}

model Coordinator {
  coordinatorID  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  accountID      String?   @unique @db.Uuid
  department     String?   @db.VarChar(255)
  employeeCode   String?   @db.VarChar(100)
  assignedRegion String?   @db.VarChar(255)
  createdAt      DateTime? @default(now()) @db.Timestamptz(6)
  Account        Account?  @relation(fields: [accountID], references: [accountID], onUpdate: NoAction)
}

model Customer {
  customerID  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  accountID   String?   @unique @db.Uuid
  fullName    String?   @db.VarChar(255)
  phoneNumber String?   @db.VarChar(20)
  address     String?
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  Account     Account?  @relation(fields: [accountID], references: [accountID], onUpdate: NoAction)
}

model Admin {
  adminID     String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  accountID   String?   @unique @db.Uuid
  fullName    String?   @db.VarChar(255)
  accessLevel String    @db.VarChar(50)
  lastLogin   DateTime? @db.Timestamptz(6)
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  Account     Account?  @relation(fields: [accountID], references: [accountID], onUpdate: NoAction)
}

model Driver {
  driverID      String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  accountID     String?   @unique @db.Uuid
  licenseNumber String    @db.VarChar(50)
  vehicleType   String?   @db.VarChar(100)
  licenseExpiry DateTime? @db.Date
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  Account       Account?  @relation(fields: [accountID], references: [accountID], onUpdate: NoAction)
}

model Staff {
  staffID      String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  accountID    String?       @unique @db.Uuid
  fullName     String?       @db.VarChar(255)
  department   String?       @db.VarChar(100)
  employeeCode String        @db.VarChar(50)
  createdAt    DateTime?     @default(now()) @db.Timestamptz(6)
  Application  Application[]
  Account      Account?      @relation(fields: [accountID], references: [accountID], onUpdate: NoAction)
}

model Application {
  applicationID String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  senderID      String?           @db.Uuid
  staffID       String?           @db.Uuid
  createdAt     DateTime?         @default(now()) @db.Timestamptz(6)
  reviewedAt    DateTime?         @default(now()) @db.Timestamptz(6)
  senderNote    String?           @db.VarChar(1000)
  senderFileUrl String?           @db.VarChar(255)
  staffNote     String?           @db.VarChar(1000)
  staffFileUrl  String?           @db.VarChar(255)
  status        ApplicationStatus @default(PENDING)
  Account       Account?          @relation(fields: [senderID], references: [accountID], onUpdate: NoAction)
  Staff         Staff?            @relation(fields: [staffID], references: [staffID], onUpdate: NoAction)
}

enum Role {
  Admin
  Staff
  Company
  Coordinator
  Driver
  Customer
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
